apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Values.namespace }}
---
apiVersion: v1
kind: Pod
metadata:
  name: all-services-pod
  namespace: {{ .Values.namespace }}
  labels:
    app: all-services
spec:
  containers:
  - name: postgres
    image: {{ .Values.postgres.image }}
    env:
    - name: POSTGRES_USER
      value: "{{ .Values.postgres.user }}"
    - name: POSTGRES_PASSWORD
      value: "{{ .Values.postgres.password }}"
    - name: POSTGRES_DB
      value: "{{ .Values.postgres.db }}"
    volumeMounts:
    - name: postgres-storage
      mountPath: /var/lib/postgresql/data
    ports:
    - containerPort: {{ .Values.postgres.port }}

  - name: flask-app
    image: {{ .Values.application.image }}
    command: ["python", "server.py"]
    env:
    - name: SQLALCHEMY_DATABASE_URI
      value: "postgresql://{{ .Values.postgres.user }}:{{ .Values.postgres.password }}@localhost:{{ .Values.postgres.port }}/{{ .Values.postgres.db }}"
    ports:
    - containerPort: {{ .Values.application.port }}
    readinessProbe:
      httpGet:
        path: /ping
        port: {{ .Values.application.port }}
      initialDelaySeconds: 10
      periodSeconds: 5
    livenessProbe:
      httpGet:
        path: /ping
        port: {{ .Values.application.port }}
      initialDelaySeconds: 15
      periodSeconds: 20

  - name: fetch-task
    image: {{ .Values.application.image }}
    command: ["python", "fetch_and_store_prices.py"]
    env:
    - name: SQLALCHEMY_DATABASE_URI
      value: "postgresql://{{ .Values.postgres.user }}:{{ .Values.postgres.password }}@localhost:{{ .Values.postgres.port }}/{{ .Values.postgres.db }}"

  volumes:
  - name: postgres-storage
    emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: flask-app-service
  namespace: {{ .Values.namespace }}
spec:
  type: NodePort
  ports:
  - port: 5000
    targetPort: 5000
    nodePort: 30000
  selector:
    app: all-services
